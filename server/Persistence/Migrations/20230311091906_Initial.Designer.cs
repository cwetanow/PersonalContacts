// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(PersonalContactsDbContext))]
    [Migration("20230311091906_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.PersonalContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("PersonalContact");
                });

            modelBuilder.Entity("Domain.PersonalContact", b =>
                {
                    b.OwnsOne("Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PersonalContactId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("text");

                            b1.HasKey("PersonalContactId");

                            b1.ToTable("PersonalContact");

                            b1.WithOwner()
                                .HasForeignKey("PersonalContactId");
                        });

                    b.OwnsOne("Domain.Iban", "Iban", b1 =>
                        {
                            b1.Property<Guid>("PersonalContactId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PersonalContactId");

                            b1.ToTable("PersonalContact");

                            b1.WithOwner()
                                .HasForeignKey("PersonalContactId");
                        });

                    b.OwnsOne("Domain.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("PersonalContactId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PersonalContactId");

                            b1.ToTable("PersonalContact");

                            b1.WithOwner()
                                .HasForeignKey("PersonalContactId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Iban")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
